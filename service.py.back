from __future__ import annotations

import datetime
from typing import Any

import bentoml
import numpy as np
from bentoml._internal.io_descriptors import NumpyNdarray
import geopandas as gpd
from pandas import DataFrame
from sklearn import datasets

from src.data_processing.models.svm_land_use import SVMLandUseClassifier

with bentoml.importing():
    from transformers import pipeline
    import sedona


EXAMPLE_INPUT = "Breaking News: In an astonishing turn of events, the small \
town of Willow Creek has been taken by storm as local resident Jerry Thompson's cat, \
Whiskers, performed what witnesses are calling a 'miraculous and gravity-defying leap.' \
Eyewitnesses report that Whiskers, an otherwise unremarkable tabby cat, jumped \
a record-breaking 20 feet into the air to catch a fly. The event, which took \
place in Thompson's backyard, is now being investigated by scientists for potential \
breaches in the laws of physics. Local authorities are considering a town festival \
to celebrate what is being hailed as 'The Leap of the Century."


my_image = bentoml.images.PythonImage(python_version="3.11") \
        .python_packages("torch", "transformers")

svm_clf = SVMLandUseClassifier()
svm_clf.train()

@bentoml.service(
    image=my_image,
    resources={"cpu": "2"},
    traffic={"timeout": 30},
    http={
        "cors": {
            "enabled": True,
            "access_control_allow_origins": ["http://localhost:4200", "https://myorg.com:8080"],
            "access_control_allow_methods": ["GET", "OPTIONS", "POST", "HEAD", "PUT"],
            "access_control_allow_credentials": True,
            "access_control_allow_headers": ["*"],
            "access_control_allow_origin_regex": "https://.*\.my_org\.com",
            "access_control_max_age": 1200,
            "access_control_expose_headers": ["Content-Length"]
        }
    }
)
class Summarization:
    # Define the Hugging Face model as a class variable
    # test = shp_input.ShapeFileInputSpark()
    # test.read_shape_file("C:/GIS/input/N_COASTAL_CHANGE_20231203_192816.shp")
    model_path = bentoml.models.HuggingFaceModel("sshleifer/distilbart-cnn-12-6")
    # area_sqm_svm_clf = bentoml.sklearn.get("area_sqm_svm_clf:latest").to_runner()
    area_sqm_svm_clf = bentoml.sklearn.load_model("area_sqm_svm_clf:latest")

    def __init__(self) -> None:
        # Load model into pipeline
        self.pipeline = pipeline('summarization', model=self.model_path)
        self.area_sqm_svm_clf_pipeline = bentoml.models.get("area_sqm_svm_clf:latest")
        # self.area_sqm_svm_clf_pipeline = bentoml.Service("area_svm_clf", runners=[self.area_sqm_svm_clf])
        # self.area_sqm_svm_clf_pipeline = pipeline('summarization',model=self.area_sqm_svm_clf)

    @bentoml.on_startup
    async def load_models(self):
        # bentoml.trend_predictor = await bentoml.sklearn.get("trend_transformer").to_runner()
        pass

    @bentoml.api
    def summarize(self, text: str = EXAMPLE_INPUT) -> dict[Any, str]:
        result = self.pipeline(text)
        resultExport = {
            "result": f"Hello world! Here's your summary: {result[0]['summary_text']}"
        }
        return resultExport

    @bentoml.api
    async def areasqmsvm(self) -> dict:
        # input_series: np.ndarray
        filePath = "D:/HighSpeedStorage/LVCHighSpd/MeenMookCoProject/POC/research/land-use-data/Landuse_bkk/กรุงเทพมหานคร2566/การใช้ที่ดิน/LU_BKK_2566.shp"
        data = gpd.read_file(filePath)
        area_sqm = data['Area_Sqm']
        input_series = DataFrame({'area_sqm': area_sqm})
        result = self.area_sqm_svm_clf_pipeline.to_runner()
        return_result = await result.async_run(input_series)
        test_model = await bentoml.sklearn.get("trend_transformer").to_runner()
        # result = self.area_sqm_svm_clf.predict.run(input_series)
        return {
            "prediction": return_result.tolist(),
            "model": "trend_transformer",
            "timestamp": datetime.datetime.now().isoformat()
        }
        # return np.array(return_result)

    # @svc.api(input=NumpyNdarray(), output=NumpyNdarray())
    @bentoml.api
    def classify(self,input_series: np.ndarray) -> np.ndarray:
        iris = datasets.load_iris()
        iris_clf_runner = bentoml.sklearn.get("iris_clf:latest").to_runner()
        iris_clf_runner.init_local()
        # svc = bentoml.Service("iris_classifier", runners=[iris_clf_runner])
        result = iris_clf_runner.predict.run(iris.data)
        return result


